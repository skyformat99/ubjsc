/*
 * Copyright (c) 2016 Tomasz Sieprawski
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 **/
/*! \file
 *  \brief Bytestream writer and pretty-printer of ubjson primitives.
 *
 * This file describes ubjs_writer structure, that writes ubjson primitives to bytestreams
 * and also pretty-prints'em.
 *
 * \since 0.2
 */
 
#ifndef HAVE_UBJS_WRITER
#define HAVE_UBJS_WRITER

#ifdef __cplusplus
extern "C"
{
#endif

#include "ubjs_common.h"
#include "ubjs_primitives.h"

/*!< \brief Writer itself. */
struct ubjs_writer;

/*!< \brief User-provided context - callbacks and userdata. */
struct ubjs_writer_context;

/*!< \brief Writer itself. */
typedef struct ubjs_writer ubjs_writer;

/*!< \brief User-provided context - callbacks and userdata. */
typedef struct ubjs_writer_context ubjs_writer_context;

/*! \brief Callback when writer produced bytes out of a primitive.
 *
 * \param this Context object you passed to ubjs_writer_new.
 * \param data Outgoing data.
 * \param len Length of the data.
 */
typedef void (*ubjs_writer_context_would_write)(ubjs_writer_context *this, uint8_t *data,
    unsigned int length);
    
/*! \brief Callback when writer produced pretty-printed version of a primitive.
 *
 * \param this Context object you passed to ubjs_writer_new.
 * \param data Outgoing printf()-ready data.
 * \param len Length of the data.
 */
typedef void (*ubjs_writer_context_would_print)(ubjs_writer_context *this, char *data,
    unsigned int length);
    
/*! \brief Callback when writer is about to be free-d.
 *
 * Here you can cleanup your userdata.
 * \param context Context object you passed to ubjs_writer_new.
 */
typedef void (*ubjs_writer_context_free)(ubjs_writer_context *this);

/*! \brief User-provided context - callbacks and userdata. */
struct ubjs_writer_context
{
    void *userdata; /*!< User context. */
    ubjs_writer_context_would_write would_write; /*!< Callback when generated bytes. */
    ubjs_writer_context_would_print would_print; /*!< Callback when generated pretty-printout. */
    ubjs_writer_context_free free; /*!< Callback when about to free the writer. */
};

/*! \brief Creates new writer.
 *
 * \param pthis Pointer to where put newly created writer.
 * \param context User context.
 * \return UR_ERROR if any of pthis/context/context->free
 * is 0, else UR_OK.
 */
UBJS_EXPORT ubjs_result ubjs_writer_new(ubjs_writer **pthis, ubjs_writer_context *context);
/*! \brief Frees the writer.
 *
 * The call to context->free will occur here.
 * After this, *pthis will be equal to 0.
 * \param pthis Pointer to the writer.
 * \return UR_ERROR if pthis is 0, else UR_OK.
 */
UBJS_EXPORT ubjs_result ubjs_writer_free(ubjs_writer **pthis);

/*! \brief Gets user context from the writer.
 *
 * \param this Writer.
 * \param pcontext Pointer to where put user context.
 * \return UR_ERROR if any of this/pcontext is 0, else UR_OK.
 */
UBJS_EXPORT ubjs_result ubjs_writer_get_context(ubjs_writer *this, ubjs_writer_context **pcontext);

/*! \brief Writes a bytestream out of a primitive.
 *
 * This produces the callback to context->would_write with fresh bytestream.
 * \param this Writer.
 * \param object Primitive.
 * \return UR_ERROR if any of this/object is 0, else UR_OK.
 */
UBJS_EXPORT ubjs_result ubjs_writer_write(ubjs_writer *this, ubjs_prmtv *object);
/*! \brief Pretty-prints out of a primitive.
 *
 * This produces the callback to context->would_print with fresh pretty-printout.
 * \param this Writer.
 * \param object Primitive.
 * \return UR_ERROR if any of this/object is 0, else UR_OK.
 */
UBJS_EXPORT ubjs_result ubjs_writer_print(ubjs_writer *this, ubjs_prmtv *object);

#ifdef __cplusplus
}
#endif

#endif
